{"ast":null,"code":"import _classCallCheck from \"/Users/nirosh/Developement/Udacity/ReactND/Module1/submission/work/myreads/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nirosh/Developement/Udacity/ReactND/Module1/submission/work/myreads/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/nirosh/Developement/Udacity/ReactND/Module1/submission/work/myreads/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/nirosh/Developement/Udacity/ReactND/Module1/submission/work/myreads/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/nirosh/Developement/Udacity/ReactND/Module1/submission/work/myreads/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/nirosh/Developement/Udacity/ReactND/Module1/submission/work/myreads/src/SearchBooks.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport BookShelf from './BookShelf.js';\nimport * as BooksAPI from './BooksAPI';\nimport sortBy from 'sort-by';\nimport { Debounce } from 'react-throttle';\n/** @constructor Search books arcording to the specied query and add selected books to specified shelf\n */\n\nvar SearchBooks =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SearchBooks, _Component);\n\n  function SearchBooks(props) {\n    var _this;\n\n    _classCallCheck(this, SearchBooks);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SearchBooks).call(this, props));\n\n    _this.updateQuery = function (query) {\n      _this.setState({\n        query: query\n      });\n\n      var searchQuery = _this.state.query;\n      var maxResults = 20;\n      BooksAPI.search(searchQuery, maxResults).then(function (books) {\n        if (typeof books !== 'undefined' && books.length > 0) {\n          if (books.length > 0) {\n            console.log(\" available = \" + _this.state.booksAvaialble.length);\n            console.log(\" from server = \" + books.length);\n            var serverAvailableBooks = books.filter(function (bookFromServer) {\n              if (bookFromServer !== undefined) {\n                var theBookFound = _this.state.booksAvaialble.find(function (userBook) {\n                  return userBook.id === bookFromServer.id;\n                });\n\n                return theBookFound === undefined;\n              } else {\n                return false;\n              }\n            }).map(function (book) {\n              book.shelf = 'none';\n              return book;\n            });\n\n            _this.setState({\n              booksAvaialble: _this.state.booksAvaialble.concat(serverAvailableBooks)\n            });\n          }\n        } else {\n          _this.setState({\n            booksAvaialble: []\n          });\n        }\n      });\n    };\n\n    _this.clearQuery = function () {\n      _this.setState({\n        query: ''\n      });\n    };\n\n    _this.state = {\n      query: '',\n      booksAvaialble: props.books\n    };\n    return _this;\n  }\n  /**\n   * update the query\n   */\n\n\n  _createClass(SearchBooks, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.clearQuery();\n    }\n    /**\n     * @description renders the search books view\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var shelfName = this.props.shelfName;\n      var _this$state = this.state,\n          booksAvaialble = _this$state.booksAvaialble,\n          query = _this$state.query;\n      booksAvaialble.sort(sortBy('name'));\n      return React.createElement(\"div\", {\n        className: \"search-books\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"search-books-bar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(Link, {\n        className: \"close-search\",\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"Close\"), React.createElement(\"div\", {\n        className: \"search-books-input-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(Debounce, {\n        time: \"400\",\n        handler: \"onChange\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Search by title or author\",\n        onChange: function onChange(event) {\n          return _this2.updateQuery(event.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        className: \"search-books-results\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, booksAvaialble.length > 0 && query !== '' ? React.createElement(BookShelf, {\n        shelfName: shelfName,\n        books: booksAvaialble,\n        onShelfChanged: this.props.onShelfChanged,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }) : React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, \"Not found\")));\n    }\n  }]);\n\n  return SearchBooks;\n}(Component);\n\nSearchBooks.propTypes = {\n  shelfName: PropTypes.string.isRequired,\n  books: PropTypes.array.isRequired,\n  onShelfChanged: PropTypes.func.isRequired\n};\nexport default SearchBooks;","map":{"version":3,"sources":["/Users/nirosh/Developement/Udacity/ReactND/Module1/submission/work/myreads/src/SearchBooks.js"],"names":["React","Component","Link","PropTypes","BookShelf","BooksAPI","sortBy","Debounce","SearchBooks","props","updateQuery","query","setState","searchQuery","state","maxResults","search","then","books","length","console","log","booksAvaialble","serverAvailableBooks","filter","bookFromServer","undefined","theBookFound","find","userBook","id","map","book","shelf","concat","clearQuery","shelfName","sort","event","target","value","onShelfChanged","propTypes","string","isRequired","array","func"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,IAAT,QAAoB,kBAApB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,OAAO,KAAKC,QAAZ,MAA0B,YAA1B;AAEA,OAAOC,MAAP,MAAmB,SAAnB;AAEA,SAASC,QAAT,QAAyB,gBAAzB;AAGA;;;IAEMC,W;;;;;AAWH,uBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AACb,qFAAMA,KAAN;;AADa,UAajBC,WAbiB,GAaH,UAACC,KAAD,EAAW;AAEpB,YAAKC,QAAL,CAAc;AACXD,QAAAA,KAAK,EAAEA;AADI,OAAd;;AAID,UAAME,WAAW,GAAG,MAAKC,KAAL,CAAWH,KAA/B;AACA,UAAMI,UAAU,GAAG,EAAnB;AAEAV,MAAAA,QAAQ,CAACW,MAAT,CAAgBH,WAAhB,EAA4BE,UAA5B,EAAwCE,IAAxC,CAA6C,UAACC,KAAD,EAAW;AAEpD,YAAI,OAAOA,KAAP,KAAiB,WAAjB,IAAgCA,KAAK,CAACC,MAAN,GAAe,CAAnD,EAAsD;AACjD,cAAGD,KAAK,CAACC,MAAN,GAAe,CAAlB,EAAqB;AACnBC,YAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkB,MAAKP,KAAL,CAAWQ,cAAX,CAA0BH,MAAxD;AACGC,YAAAA,OAAO,CAACC,GAAR,CAAY,oBAAoBH,KAAK,CAACC,MAAtC;AACH,gBAAII,oBAAoB,GAAGL,KAAK,CAACM,MAAN,CAAa,UAACC,cAAD,EAAkB;AACxD,kBAAGA,cAAc,KAAIC,SAArB,EACA;AACE,oBAAMC,YAAY,GAAG,MAAKb,KAAL,CAAWQ,cAAX,CAA0BM,IAA1B,CAA+B,UAACC,QAAD,EAAY;AACxD,yBAAOA,QAAQ,CAACC,EAAT,KAAgBL,cAAc,CAACK,EAAtC;AACC,iBAFY,CAArB;;AAGA,uBAAOH,YAAY,KAAKD,SAAxB;AACD,eAND,MAOI;AACF,uBAAO,KAAP;AACD;AAEF,aAZ0B,EAYxBK,GAZwB,CAYpB,UAACC,IAAD,EAAQ;AACbA,cAAAA,IAAI,CAACC,KAAL,GAAW,MAAX;AACA,qBAAOD,IAAP;AACD,aAf0B,CAA3B;;AAiBD,kBAAKpB,QAAL,CAAc;AACVU,cAAAA,cAAc,EAAE,MAAKR,KAAL,CAAWQ,cAAX,CAA0BY,MAA1B,CACdX,oBADc;AADN,aAAd;AAKA;AACJ,SA3BF,MA4BM;AACF,gBAAKX,QAAL,CAAc;AACVU,YAAAA,cAAc,EAAE;AADN,WAAd;AAGH;AAEJ,OApCD;AAsCH,KA5DgB;;AAAA,UAiEjBa,UAjEiB,GAiEJ,YAAM;AACf,YAAKvB,QAAL,CAAc;AAAED,QAAAA,KAAK,EAAE;AAAT,OAAd;AACH,KAnEgB;;AAGb,UAAKG,KAAL,GAAa;AACTH,MAAAA,KAAK,EAAE,EADE;AAETW,MAAAA,cAAc,EAAEb,KAAK,CAACS;AAFb,KAAb;AAHa;AAOhB;AAGD;;;;;;;wCA2DoB;AAChB,WAAKiB,UAAL;AAEH;AAED;;;;;;6BAGQ;AAAA;;AAAA,UACIC,SADJ,GACiB,KAAK3B,KADtB,CACI2B,SADJ;AAAA,wBAE2B,KAAKtB,KAFhC;AAAA,UAEGQ,cAFH,eAEGA,cAFH;AAAA,UAEkBX,KAFlB,eAEkBA,KAFlB;AAIJW,MAAAA,cAAc,CAACe,IAAf,CAAoB/B,MAAM,CAAC,MAAD,CAA1B;AAEA,aACA;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,IAAD;AAAM,QAAA,SAAS,EAAC,cAAhB;AAA+B,QAAA,EAAE,EAAC,GAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADA,EAEE;AAAK,QAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SASE,oBAAC,QAAD;AAAU,QAAA,IAAI,EAAC,KAAf;AAAqB,QAAA,OAAO,EAAC,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,WAAW,EAAC,2BAA/B;AACI,QAAA,QAAQ,EAAE,kBAACgC,KAAD;AAAA,iBAAW,MAAI,CAAC5B,WAAL,CAAiB4B,KAAK,CAACC,MAAN,CAAaC,KAA9B,CAAX;AAAA,SADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CATF,CAFF,CADJ,EAoBI;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEElB,cAAc,CAACH,MAAf,GAAwB,CAAxB,IAA8BR,KAAK,KAAK,EAAxC,GACA,oBAAC,SAAD;AAAW,QAAA,SAAS,EAAEyB,SAAtB;AAAiC,QAAA,KAAK,EAAEd,cAAxC;AAAwD,QAAA,cAAc,EAAE,KAAKb,KAAL,CAAWgC,cAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,GAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBALF,CApBJ,CADA;AAgCH;;;;EA9HqBxC,S;;AAApBO,W,CAKGkC,S,GAAY;AACjBN,EAAAA,SAAS,EAAEjC,SAAS,CAACwC,MAAV,CAAiBC,UADX;AAEjB1B,EAAAA,KAAK,EAAEf,SAAS,CAAC0C,KAAV,CAAgBD,UAFN;AAGjBH,EAAAA,cAAc,EAAEtC,SAAS,CAAC2C,IAAV,CAAeF;AAHd,C;AA4HrB,eAAepC,WAAf","sourcesContent":["import React, {Component} from 'react';\nimport { Link} from 'react-router-dom';\nimport PropTypes from 'prop-types'\n\nimport BookShelf from './BookShelf.js'\nimport * as BooksAPI from './BooksAPI'\n\nimport sortBy from 'sort-by'\n\nimport { Debounce } from 'react-throttle'\n\n\n/** @constructor Search books arcording to the specied query and add selected books to specified shelf\n */\nclass SearchBooks extends Component {\n\n  statics:  {\n       MAX_RESULTS: 20\n   }\n  static propTypes = {\n    shelfName: PropTypes.string.isRequired,\n    books: PropTypes.array.isRequired,\n    onShelfChanged: PropTypes.func.isRequired\n  }\n\n   constructor(props){\n        super(props)\n\n        this.state = {\n            query: '',\n            booksAvaialble: props.books\n        }\n    }\n\n\n    /**\n     * update the query\n     */\n    updateQuery = (query) => {\n\n         this.setState({\n            query: query\n        })\n\n        const searchQuery = this.state.query\n        const maxResults = 20\n\n        BooksAPI.search(searchQuery,maxResults).then((books) => {\n\n            if (typeof books !== 'undefined' && books.length > 0) {\n                 if(books.length > 0 ){\n                   console.log(\" available = \" + this.state.booksAvaialble.length)\n                      console.log(\" from server = \" + books.length)\n                   let serverAvailableBooks = books.filter((bookFromServer)=>{\n                     if(bookFromServer!== undefined)\n                     {\n                       const theBookFound = this.state.booksAvaialble.find((userBook)=>{\n                               return userBook.id === bookFromServer.id\n                               })\n                       return theBookFound === undefined;\n                     }\n                     else{\n                       return false;\n                     }\n\n                   }).map((book)=>{\n                     book.shelf='none'\n                     return book;\n                   });\n\n                  this.setState({\n                      booksAvaialble: this.state.booksAvaialble.concat(\n                        serverAvailableBooks\n                      )\n                  })\n                 }\n             }\n              else{\n                this.setState({\n                    booksAvaialble: []\n                })\n            }\n\n        })\n\n    }\n\n    /**\n     * clear the query\n     */\n    clearQuery = () => {\n        this.setState({ query: '' })\n    }\n\n    componentDidMount() {\n        this.clearQuery();\n\n    }\n\n    /**\n     * @description renders the search books view\n     */\n    render(){\n        const { shelfName} = this.props\n        const {booksAvaialble,query} = this.state\n\n        booksAvaialble.sort(sortBy('name'))\n\n        return (\n        <div className=\"search-books\">\n            <div className=\"search-books-bar\">\n            <Link className='close-search' to='/'>Close</Link>\n              <div className=\"search-books-input-wrapper\">\n                {/*\n                  NOTES: The search from BooksAPI is limited to a particular set of search terms.\n                  You can find these search terms here:\n                  https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\n\n                  However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\n                  you don't find a specific author or title. Every search is limited by search terms.\n                */}\n                <Debounce time=\"400\" handler=\"onChange\">\n                  <input type=\"text\" placeholder=\"Search by title or author\"\n                      onChange={(event) => this.updateQuery(event.target.value)}\n                  />\n                </Debounce>\n\n              </div>\n            </div>\n            <div className=\"search-books-results\">\n            {\n              booksAvaialble.length > 0  && query !== ''?\n              <BookShelf shelfName={shelfName} books={booksAvaialble} onShelfChanged={this.props.onShelfChanged}/>\n              :\n              <p>Not found</p>\n            }\n            </div>\n          </div>\n\n        )\n    }\n}\n\nexport default SearchBooks\n"]},"metadata":{},"sourceType":"module"}